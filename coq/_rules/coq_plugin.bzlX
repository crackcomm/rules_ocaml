load("//ocaml:providers.bzl",
     "OcamlArchiveProvider",
     "OcamlLibraryProvider",
     "OcamlModuleProvider",
     "OcamlNsArchiveProvider",
     "OcamlNsLibraryProvider",
     "OcamlSignatureProvider",
     "PpxArchiveProvider") ## what about PpxModule?

load("//ocaml/_rules:options.bzl", "options")

load("//ocaml/_rules:impl_archive.bzl", "impl_archive")

load("//ocaml/_transitions:ns_transitions.bzl", "nsarchive_in_transition")

#####################
coq_plugin = rule(
    implementation = impl_archive,
    doc = """Generates an OCaml archive file.""",
    attrs = dict(
        options("ocaml"),
        archive_name = attr.string(
            doc = "Name of generated archive file, without extension. Overrides `name` attribute."
        ),
        ## CONFIGURABLE DEFAULTS
        _linkall     = attr.label(default = "@ocaml//archive/linkall"),
        _thread     = attr.label(default = "@ocaml//archive/thread"),
        _warnings  = attr.label(default = "@ocaml//archive:warnings"),
        #### end options ####

        shared = attr.bool(
            doc = "True: build a shared lib (.cmxs)",
            default = False
        ),

        standalone = attr.bool(
            doc = "True: link total depgraph. False: link only direct deps.  Default False.",
            default = False
        ),

        resolver = attr.output(
            doc = "Name of 'resolver' module to generate containing identity aliases for submodules.",
        ),

        grammar = attr.label_list(
        ),

        modules = attr.label_list(
            doc = "List of component modules.",
            providers = [## [OcamlImportProvider],
                         [OcamlLibraryProvider],
                         # [OcamlArchiveProvider],
                         [OcamlModuleProvider],
                         # [OcamlNsArchiveProvider],
                         [OcamlNsLibraryProvider],
                         [OcamlSignatureProvider],
                         # [PpxArchiveProvider]
                         ],
        ),

        ## FIXME: do archive rules need to support cc_deps?
        ## They should be attached to members of the archive.
        ## OTOH, if the ocaml wrapper on a cc_dep consists of multiple modules
        ## it makes sense to aggregate them into an archive or library
        ## and attach the cc_dep to the latter.
        cc_deps = attr.label_keyed_string_dict(
            doc = """Dictionary specifying C/C++ library dependencies. Key: a target label; value: a linkmode string, which determines which file to link. Valid linkmodes: 'default', 'static', 'dynamic', 'shared' (synonym for 'dynamic'). For more information see [CC Dependencies: Linkmode](../ug/cc_deps.md#linkmode).
            """,
            providers = [[CcInfo]]
        ),
        cc_linkopts = attr.string_list(
            doc = "List of C/C++ link options. E.g. `[\"-lstd++\"]`.",
        ),
        # cc_linkall = attr.label_list( ## FIXME: not needed
        #     doc     = "True: use `-whole-archive` (GCC toolchain) or `-force_load` (Clang toolchain). Deps in this attribute must also be listed in cc_deps.",
        #     providers = [CcInfo],
        # ),
        _cc_linkmode = attr.label( ## FIXME: not needed?
            doc     = "Override platform-dependent link mode (static or dynamic). Configurable default is platform-dependent: static on Linux, dynamic on MacOS.",
            # default is os-dependent, but settable to static or dynamic
        ),
        _mode = attr.label(
            default = "@ocaml//mode"
        ),
        _projroot = attr.label(
            default = "@ocaml//:projroot"
        ),
        _sdkpath = attr.label(
            default = Label("@ocaml//:sdkpath")
        ),
        _rule = attr.string( default = "coq_plugin" ),
        _allowlist_function_transition = attr.label(
            default = "@bazel_tools//tools/allowlists/function_transition_allowlist"
        ),
    ),
    ## this is not an ns archive, and it does not use ns ConfigState,
    ## but we need to reset the ConfigState anyway, so the deps are not affected.
    cfg     = nsarchive_in_transition,
    provides = [OcamlArchiveProvider],
    executable = False,
    toolchains = ["@ocaml//ocaml:toolchain"],
)
